{"ast":null,"code":"/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n *\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef {Element | Root} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {number | string} StyleValue\n *   Value for a CSS style field.\n * @typedef {Record<string, StyleValue>} Style\n *   Supported value of a `style` prop.\n * @typedef {boolean | number | string | null | undefined} PrimitiveValue\n *   Primitive property value.\n * @typedef {Array<number | string>} ArrayValue\n *   List of property values for space- or comma separated values (such as `className`).\n * @typedef {ArrayValue | PrimitiveValue} PropertyValue\n *   Primitive value or list value.\n * @typedef {{[property: string]: PropertyValue | Style}} Properties\n *   Acceptable value for element properties.\n *\n * @typedef {number | string | null | undefined} PrimitiveChild\n *   Primitive children, either ignored (nullish), or turned into text nodes.\n * @typedef {Array<ArrayChildNested | Nodes | PrimitiveChild>} ArrayChild\n *   List of children.\n * @typedef {Array<Nodes | PrimitiveChild>} ArrayChildNested\n *   List of children (deep).\n * @typedef {ArrayChild | Nodes | PrimitiveChild} Child\n *   Acceptable child value.\n */\n\nimport { parse as commas } from 'comma-separated-tokens';\nimport { parseSelector } from 'hast-util-parse-selector';\nimport { find, normalize } from 'property-information';\nimport { parse as spaces } from 'space-separated-tokens';\nconst buttonTypes = new Set(['button', 'menu', 'reset', 'submit']);\nconst own = {}.hasOwnProperty;\n\n/**\n * @param {Schema} schema\n *   Schema to use.\n * @param {string} defaultTagName\n *   Default tag name.\n * @param {Array<string> | undefined} [caseSensitive]\n *   Case-sensitive tag names (default: `undefined`).\n * @returns\n *   `h`.\n */\nexport function createH(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive);\n\n  /**\n   * Hyperscript compatible DSL for creating virtual hast trees.\n   *\n   * @overload\n   * @param {null | undefined} [selector]\n   * @param {...Child} children\n   * @returns {Root}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {Properties} properties\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @param {string | null | undefined} [selector]\n   *   Selector.\n   * @param {Child | Properties | null | undefined} [properties]\n   *   Properties (or first child) (default: `undefined`).\n   * @param {...Child} children\n   *   Children.\n   * @returns {Result}\n   *   Result.\n   */\n  function h(selector, properties, ...children) {\n    let index = -1;\n    /** @type {Result} */\n    let node;\n    if (selector === undefined || selector === null) {\n      node = {\n        type: 'root',\n        children: []\n      };\n      // Properties are not supported for roots.\n      const child = /** @type {Child} */properties;\n      children.unshift(child);\n    } else {\n      node = parseSelector(selector, defaultTagName);\n      // Normalize the name.\n      node.tagName = node.tagName.toLowerCase();\n      if (adjust && own.call(adjust, node.tagName)) {\n        node.tagName = adjust[node.tagName];\n      }\n\n      // Handle props.\n      if (isProperties(properties, node.tagName)) {\n        /** @type {string} */\n        let key;\n        for (key in properties) {\n          if (own.call(properties, key)) {\n            addProperty(schema, node.properties, key, properties[key]);\n          }\n        }\n      } else {\n        children.unshift(properties);\n      }\n    }\n\n    // Handle children.\n    while (++index < children.length) {\n      addChild(node.children, children[index]);\n    }\n    if (node.type === 'element' && node.tagName === 'template') {\n      node.content = {\n        type: 'root',\n        children: node.children\n      };\n      node.children = [];\n    }\n    return node;\n  }\n  return h;\n}\n\n/**\n * Check if something is properties or a child.\n *\n * @param {Child | Properties} value\n *   Value to check.\n * @param {string} name\n *   Tag name.\n * @returns {value is Properties}\n *   Whether `value` is a properties object.\n */\nfunction isProperties(value, name) {\n  if (value === null || value === undefined || typeof value !== 'object' || Array.isArray(value)) {\n    return false;\n  }\n  if (name === 'input' || !value.type || typeof value.type !== 'string') {\n    return true;\n  }\n  if ('children' in value && Array.isArray(value.children)) {\n    return false;\n  }\n  if (name === 'button') {\n    return buttonTypes.has(value.type.toLowerCase());\n  }\n  return !('value' in value);\n}\n\n/**\n * @param {Schema} schema\n *   Schema.\n * @param {Properties} properties\n *   Properties object.\n * @param {string} key\n *   Property name.\n * @param {PropertyValue | Style} value\n *   Property value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key);\n  let index = -1;\n  /** @type {PropertyValue} */\n  let result;\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return;\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return;\n    result = value;\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value;\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value);\n    } else if (info.commaSeparated) {\n      result = commas(value);\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '));\n    } else {\n      result = parsePrimitive(info, info.property, value);\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat();\n  } else {\n    result = info.property === 'style' ? style(value) : String(value);\n  }\n  if (Array.isArray(result)) {\n    /** @type {Array<number | string>} */\n    const finalResult = [];\n    while (++index < result.length) {\n      // Assume no booleans in array.\n      const value = /** @type {number | string} */\n      parsePrimitive(info, info.property, result[index]);\n      finalResult[index] = value;\n    }\n    result = finalResult;\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // Assume no booleans in `className`.\n    const value = /** @type {number | string} */result;\n    result = properties.className.concat(value);\n  }\n  properties[info.property] = result;\n}\n\n/**\n * @param {Array<RootContent>} nodes\n *   Children.\n * @param {Child} value\n *   Child.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChild(nodes, value) {\n  let index = -1;\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({\n      type: 'text',\n      value: String(value)\n    });\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index]);\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children);\n    } else {\n      nodes.push(value);\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`');\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n *   Property information.\n * @param {string} name\n *   Property name.\n * @param {PrimitiveValue} value\n *   Property value.\n * @returns {PrimitiveValue}\n *   Property value.\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value);\n    }\n    if ((info.boolean || info.overloadedBoolean) && (value === '' || normalize(value) === normalize(name))) {\n      return true;\n    }\n  }\n  return value;\n}\n\n/**\n * Serialize a `style` object as a string.\n *\n * @param {Style} value\n *   Style object.\n * @returns {string}\n *   CSS string.\n */\nfunction style(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {string} */\n  let key;\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '));\n    }\n  }\n  return result.join('; ');\n}\n\n/**\n * Create a map to adjust casing.\n *\n * @param {Array<string>} values\n *   List of properly cased keys.\n * @returns {Record<string, string>}\n *   Map of lowercase keys to uppercase keys.\n */\nfunction createAdjustMap(values) {\n  /** @type {Record<string, string>} */\n  const result = {};\n  let index = -1;\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index];\n  }\n  return result;\n}","map":{"version":3,"names":["parse","commas","parseSelector","find","normalize","spaces","buttonTypes","Set","own","hasOwnProperty","createH","schema","defaultTagName","caseSensitive","adjust","createAdjustMap","h","selector","properties","children","index","node","undefined","type","child","unshift","tagName","toLowerCase","call","isProperties","key","addProperty","length","addChild","content","value","name","Array","isArray","has","info","result","Number","isNaN","spaceSeparated","commaSeparated","commaOrSpaceSeparated","join","parsePrimitive","property","concat","style","String","finalResult","className","nodes","push","Error","number","boolean","overloadedBoolean","values"],"sources":["E:/UnitWTF/lab ai/base-ui-cra/node_modules/hastscript/lib/create-h.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n *\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef {Element | Root} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {number | string} StyleValue\n *   Value for a CSS style field.\n * @typedef {Record<string, StyleValue>} Style\n *   Supported value of a `style` prop.\n * @typedef {boolean | number | string | null | undefined} PrimitiveValue\n *   Primitive property value.\n * @typedef {Array<number | string>} ArrayValue\n *   List of property values for space- or comma separated values (such as `className`).\n * @typedef {ArrayValue | PrimitiveValue} PropertyValue\n *   Primitive value or list value.\n * @typedef {{[property: string]: PropertyValue | Style}} Properties\n *   Acceptable value for element properties.\n *\n * @typedef {number | string | null | undefined} PrimitiveChild\n *   Primitive children, either ignored (nullish), or turned into text nodes.\n * @typedef {Array<ArrayChildNested | Nodes | PrimitiveChild>} ArrayChild\n *   List of children.\n * @typedef {Array<Nodes | PrimitiveChild>} ArrayChildNested\n *   List of children (deep).\n * @typedef {ArrayChild | Nodes | PrimitiveChild} Child\n *   Acceptable child value.\n */\n\nimport {parse as commas} from 'comma-separated-tokens'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {find, normalize} from 'property-information'\nimport {parse as spaces} from 'space-separated-tokens'\n\nconst buttonTypes = new Set(['button', 'menu', 'reset', 'submit'])\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Schema} schema\n *   Schema to use.\n * @param {string} defaultTagName\n *   Default tag name.\n * @param {Array<string> | undefined} [caseSensitive]\n *   Case-sensitive tag names (default: `undefined`).\n * @returns\n *   `h`.\n */\nexport function createH(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive)\n\n  /**\n   * Hyperscript compatible DSL for creating virtual hast trees.\n   *\n   * @overload\n   * @param {null | undefined} [selector]\n   * @param {...Child} children\n   * @returns {Root}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {Properties} properties\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @param {string | null | undefined} [selector]\n   *   Selector.\n   * @param {Child | Properties | null | undefined} [properties]\n   *   Properties (or first child) (default: `undefined`).\n   * @param {...Child} children\n   *   Children.\n   * @returns {Result}\n   *   Result.\n   */\n  function h(selector, properties, ...children) {\n    let index = -1\n    /** @type {Result} */\n    let node\n\n    if (selector === undefined || selector === null) {\n      node = {type: 'root', children: []}\n      // Properties are not supported for roots.\n      const child = /** @type {Child} */ (properties)\n      children.unshift(child)\n    } else {\n      node = parseSelector(selector, defaultTagName)\n      // Normalize the name.\n      node.tagName = node.tagName.toLowerCase()\n      if (adjust && own.call(adjust, node.tagName)) {\n        node.tagName = adjust[node.tagName]\n      }\n\n      // Handle props.\n      if (isProperties(properties, node.tagName)) {\n        /** @type {string} */\n        let key\n\n        for (key in properties) {\n          if (own.call(properties, key)) {\n            addProperty(schema, node.properties, key, properties[key])\n          }\n        }\n      } else {\n        children.unshift(properties)\n      }\n    }\n\n    // Handle children.\n    while (++index < children.length) {\n      addChild(node.children, children[index])\n    }\n\n    if (node.type === 'element' && node.tagName === 'template') {\n      node.content = {type: 'root', children: node.children}\n      node.children = []\n    }\n\n    return node\n  }\n\n  return h\n}\n\n/**\n * Check if something is properties or a child.\n *\n * @param {Child | Properties} value\n *   Value to check.\n * @param {string} name\n *   Tag name.\n * @returns {value is Properties}\n *   Whether `value` is a properties object.\n */\nfunction isProperties(value, name) {\n  if (\n    value === null ||\n    value === undefined ||\n    typeof value !== 'object' ||\n    Array.isArray(value)\n  ) {\n    return false\n  }\n\n  if (name === 'input' || !value.type || typeof value.type !== 'string') {\n    return true\n  }\n\n  if ('children' in value && Array.isArray(value.children)) {\n    return false\n  }\n\n  if (name === 'button') {\n    return buttonTypes.has(value.type.toLowerCase())\n  }\n\n  return !('value' in value)\n}\n\n/**\n * @param {Schema} schema\n *   Schema.\n * @param {Properties} properties\n *   Properties object.\n * @param {string} key\n *   Property name.\n * @param {PropertyValue | Style} value\n *   Property value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key)\n  let index = -1\n  /** @type {PropertyValue} */\n  let result\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value)\n    } else if (info.commaSeparated) {\n      result = commas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat()\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    /** @type {Array<number | string>} */\n    const finalResult = []\n\n    while (++index < result.length) {\n      // Assume no booleans in array.\n      const value = /** @type {number | string} */ (\n        parsePrimitive(info, info.property, result[index])\n      )\n      finalResult[index] = value\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // Assume no booleans in `className`.\n    const value = /** @type {number | string} */ (result)\n    result = properties.className.concat(value)\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array<RootContent>} nodes\n *   Children.\n * @param {Child} value\n *   Child.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChild(nodes, value) {\n  let index = -1\n\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index])\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n *   Property information.\n * @param {string} name\n *   Property name.\n * @param {PrimitiveValue} value\n *   Property value.\n * @returns {PrimitiveValue}\n *   Property value.\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * Serialize a `style` object as a string.\n *\n * @param {Style} value\n *   Style object.\n * @returns {string}\n *   CSS string.\n */\nfunction style(value) {\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '))\n    }\n  }\n\n  return result.join('; ')\n}\n\n/**\n * Create a map to adjust casing.\n *\n * @param {Array<string>} values\n *   List of properly cased keys.\n * @returns {Record<string, string>}\n *   Map of lowercase keys to uppercase keys.\n */\nfunction createAdjustMap(values) {\n  /** @type {Record<string, string>} */\n  const result = {}\n  let index = -1\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index]\n  }\n\n  return result\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}